import{U as a}from"./bootstrap-2a895a5a.js";const l=a("staking",{state:()=>({coins:[],logs:[],coinlogs:[],assets:null,last_profit:null,total_profit:null,wallet:null,wallets:[],coin:null,loading:!1,isShowModal:{stake:!1,cancel:!1,claim:!1}}),actions:{async fetch(){await axios.post("/user/fetch/staking").then(s=>{s.message=="Verify your identify first!"&&(window.location.href="/user/kyc"),this.coins=s.coins,this.logs=s.logs,this.coinlogs=s.coinlogs,this.assets=s.assets,this.last_profit=s.last_profit,this.total_profit=s.total_profit,this.wallet=s.wallet}),await axios.post("/user/fetch/staking/wallets").then(s=>{this.wallets=s.wallets})},async fetchPublic(){await axios.post("/publicroute/fetch/staking").then(s=>{this.coins=s.coins})},async setCoin(s,t){this.coin=s,this.showModal(t)},closeModal(s){s=="stake"?this.isShowModal.stake=!1:s=="cancel"?this.isShowModal.cancel=!1:s=="claim"&&(this.isShowModal.claim=!1)},showModal(s){s=="stake"?this.isShowModal.stake=!0:s=="cancel"?this.isShowModal.cancel=!0:s=="claim"&&(this.isShowModal.claim=!0)},async Stake(s){this.loading=!0,await axios.post("/user/staking/store",{symbol:this.coin.symbol,coin_id:this.coin.id,amount:s}).then(t=>{$toast[t.type](t.message),this.fetch()}).catch(t=>{$toast.error(t.response.data.message)}).finally(()=>{this.closeModal("stake"),this.loading=!1})},async StakeNew(s){this.loading=!0,await axios.post("/user/staking/store/new",{symbol:this.coin.symbol,coin_id:this.coin.id,selected_symbol:this.wallet.symbol,amount:s,wallet_id:this.wallet.id}).then(t=>{$toast[t.type](t.message),this.fetch()}).catch(t=>{$toast.error(t.response.data.message)}).finally(()=>{this.closeModal("stake"),this.loading=!1})},async CancelStake(){this.loading=!0,await axios.post("/user/staking/new/cancel",{symbol:this.coin.symbol,coin_id:this.coin.id}).then(s=>{$toast[s.type](s.message),this.fetch()}).catch(s=>{$toast.error(s.response.data.message)}).finally(()=>{this.closeModal("cancel"),this.loading=!1})},async ClaimStake(){this.loading=!0,await axios.post("/user/staking/claim",{symbol:this.coin.symbol,coin_id:this.coin.id}).then(s=>{$toast[s.type](s.message),this.fetch()}).catch(s=>{$toast.error(s.response.data.message)}).finally(()=>{this.closeModal("claim"),this.loading=!1})}},persist:!0});export{l as u};
